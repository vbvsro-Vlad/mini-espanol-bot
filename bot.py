# bot.py
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import os
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import time
import json
from gtts import gTTS
from pydub import AudioSegment

from content import get_daily_content, COURSES

load_dotenv()

API_TOKEN = os.getenv('BOT_TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_scores = {}

class QuizCallback(CallbackData, prefix="quiz"):
    answer_index: int

SCORES_FILE = "scores.json"

# –í—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

def load_scores():
    return {}

def save_scores():
    pass  # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

def text_to_speech(text: str, lang: str = 'es') -> str:
    try:
        tts = gTTS(text=text, lang=lang, slow=False)
        mp3_file = "temp.mp3"
        ogg_file = "temp.ogg"
        tts.save(mp3_file)
        audio = AudioSegment.from_mp3(mp3_file)
        audio.export(ogg_file, format="ogg")
        os.remove(mp3_file)
        return ogg_file
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_scores:
        user_scores[user_id] = {
            "puntos": 0,
            "nivel": "A1",
            "curso": "general",
            "palabras_aprendidas": 0,
            "quiz_resueltos": 0,
            "errores": 0
        }
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –û–±—â–∏–π –∫—É—Ä—Å", callback_data="curso_general")],
            [InlineKeyboardButton(text="‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data="curso_viajes")],
            [InlineKeyboardButton(text="üíº –î–µ–ª–æ–≤–æ–π", callback_data="curso_negocios")]
        ])
        await message.answer(
            "¬°Hola! üëã –Ø MiniEspa√±olBot ‚Äî —Ç–≤–æ–π –º–∏–Ω–∏-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ.\n\n"
            "üìå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
            reply_markup=keyboard
        )
    else:
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî§ –°–ª–æ–≤–æ –¥–Ω—è", callback_data="menu_palabra")],
            [InlineKeyboardButton(text="üó£ –§—Ä–∞–∑–∞ –¥–Ω—è", callback_data="menu_frase")],
            [InlineKeyboardButton(text="‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="menu_quiz")],
            [InlineKeyboardButton(text="üéì –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="menu_curso")],
            [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_progreso")]
        ])
        await message.answer(
            "¬°Bienvenido de nuevo! üòä\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=inline_keyboard
        )
        await message.answer(
            "üëá –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
            reply_markup=main_menu_keyboard
        )

@dp.callback_query(lambda c: c.data.startswith("curso_"))
async def set_course(call: types.CallbackQuery):
    user_id = call.from_user.id
    curso = call.data.split("_")[1]
    if user_id not in user_scores:
        user_scores[user_id] = {"puntos": 0, "nivel": "A1"}
    user_scores[user_id]["curso"] = curso
    save_scores()
    curso_names = {
        "general": "–û–±—â–∏–π –∫—É—Ä—Å",
        "viajes": "–ò—Å–ø–∞–Ω—Å–∫–∏–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
        "negocios": "–î–µ–ª–æ–≤–æ–π –∏—Å–ø–∞–Ω—Å–∫–∏–π"
    }
    await call.message.answer(f"‚úÖ –ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω: {curso_names.get(curso, curso)}.")
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî§ –°–ª–æ–≤–æ –¥–Ω—è", callback_data="menu_palabra")],
        [InlineKeyboardButton(text="üó£ –§—Ä–∞–∑–∞ –¥–Ω—è", callback_data="menu_frase")],
        [InlineKeyboardButton(text="‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="menu_quiz")],
        [InlineKeyboardButton(text="üéì –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="menu_curso")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_progreso")]
    ])
    await call.message.answer("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=inline_keyboard)
    await call.answer()

@dp.message(lambda message: message.text == "üè† –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
async def handle_main_menu_button(message: types.Message):
    await send_welcome(message)

# --- –ú–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.callback_query(lambda c: c.data == "menu_palabra")
async def menu_palabra(call: types.CallbackQuery):
    await send_word(call.message)
    await call.answer()

@dp.callback_query(lambda c: c.data == "menu_frase")
async def menu_frase(call: types.CallbackQuery):
    await send_phrase(call.message)
    await call.answer()

@dp.callback_query(lambda c: c.data == "menu_quiz")
async def menu_quiz(call: types.CallbackQuery):
    await send_quiz(call.message)
    await call.answer()

@dp.callback_query(lambda c: c.data == "menu_curso")
async def menu_curso(call: types.CallbackQuery):
    await choose_course(call.message)
    await call.answer()

@dp.callback_query(lambda c: c.data == "menu_progreso")
async def menu_progreso(call: types.CallbackQuery):
    await show_progress(call.message)
    await call.answer()

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("palabra"))
async def send_word(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_scores:
        user_scores[user_id] = {
            "puntos": 0,
            "nivel": "A1",
            "curso": "general",
            "palabras_aprendidas": 0,
            "quiz_resueltos": 0,
            "errores": 0
        }
    curso = user_scores[user_id].get("curso", "general")
    daily_content = get_daily_content(curso=curso)
    user_scores[user_id]["palabras_aprendidas"] += 1
    save_scores()
    word = daily_content["palabra"]
    await message.answer(
        f"üî§ *Palabra del d√≠a ({COURSES[curso]['name']}):*\n"
        f"*{word['es']}* ‚Äî {word['ru']}\n\n"
        f"üí¨ –ü—Ä–∏–º–µ—Ä: _{word['example']}_",
        parse_mode="Markdown"
    )
    audio_file = text_to_speech(word['es'], lang='es')
    if audio_file:
        voice_file = FSInputFile(audio_file)
        await message.answer_voice(voice_file, caption="üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ")
        os.remove(audio_file)

@dp.message(Command("frase"))
async def send_phrase(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_scores:
        user_scores[user_id] = {
            "puntos": 0,
            "nivel": "A1",
            "curso": "general",
            "palabras_aprendidas": 0,
            "quiz_resueltos": 0,
            "errores": 0
        }
    curso = user_scores[user_id].get("curso", "general")
    daily_content = get_daily_content(curso=curso)
    phrase = daily_content["frase"]
    await message.answer(
        f"üó£ *Frase del d√≠a ({COURSES[curso]['name']}):*\n"
        f"_{phrase['es']}_\n"
        f"‚Üí {phrase['ru']}\n\n"
        f"üìå –ö–æ–Ω—Ç–µ–∫—Å—Ç: {phrase['context']}",
        parse_mode="Markdown"
    )
    audio_file = text_to_speech(phrase['es'], lang='es')
    if audio_file:
        voice_file = FSInputFile(audio_file)
        await message.answer_voice(voice_file, caption="üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã")
        os.remove(audio_file)

@dp.message(Command("quiz"))
async def send_quiz(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_scores:
        user_scores[user_id] = {
            "puntos": 0,
            "nivel": "A1",
            "curso": "general",
            "palabras_aprendidas": 0,
            "quiz_resueltos": 0,
            "errores": 0
        }
    curso = user_scores[user_id].get("curso", "general")
    daily_content = get_daily_content(curso=curso)
    quiz = daily_content["quiz"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for i, option in enumerate(quiz["options"]):
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=option,
                callback_data=QuizCallback(answer_index=i).pack()
            )
        ])
    await message.answer(f"‚ùì *{quiz['question']}*", reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(QuizCallback.filter())
async def handle_quiz_answer(call: types.CallbackQuery, callback_data: QuizCallback):
    user_id = call.from_user.id
    if user_id not in user_scores:
        user_scores[user_id] = {
            "puntos": 0,
            "nivel": "A1",
            "curso": "general",
            "palabras_aprendidas": 0,
            "quiz_resueltos": 0,
            "errores": 0
        }
    else:
        user = user_scores[user_id]
        user.setdefault("quiz_resueltos", 0)
        user.setdefault("errores", 0)
        user.setdefault("palabras_aprendidas", 0)
        user.setdefault("curso", "general")
    selected_index = callback_data.answer_index
    curso = user_scores[user_id]["curso"]
    daily_content = get_daily_content(curso=curso)
    correct_index = daily_content["quiz"]["correct"]
    user_scores[user_id]["quiz_resueltos"] += 1
    if selected_index == correct_index:
        user_scores[user_id]["puntos"] += 10
        save_scores()
        await call.message.answer("‚úÖ ¬°Correcto! +10 puntos üéâ")
    else:
        user_scores[user_id]["errores"] += 1
        save_scores()
        await call.message.answer(f"‚ùå No es correcto. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{daily_content['quiz']['options'][correct_index]}*", parse_mode="Markdown")
    await call.answer()

@dp.message(Command("progreso"))
async def show_progress(message: types.Message):
    user_id = message.from_user.id
    user = user_scores.get(user_id, {})
    puntos = user.get("puntos", 0)
    quiz_resueltos = user.get("quiz_resueltos", 0)
    errores = user.get("errores", 0)
    palabras_aprendidas = user.get("palabras_aprendidas", 0)
    curso = user.get("curso", "general")
    if quiz_resueltos > 0:
        porcentaje = round((quiz_resueltos - errores) / quiz_resueltos * 100)
    else:
        porcentaje = 0
    curso_name = COURSES.get(curso, {}).get("name", "–û–±—â–∏–π –∫—É—Ä—Å")
    mensaje = (
        f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üìö –ö—É—Ä—Å: {curso_name}\n"
        f"üèÜ –û—á–∫–∏: *{puntos}*\n"
        f"‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {quiz_resueltos}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {quiz_resueltos - errores}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errores}\n"
        f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: *{porcentaje}%*\n"
        f"üìñ –°–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ: {palabras_aprendidas}"
    )
    await message.answer(mensaje, parse_mode="Markdown")

@dp.message(Command("curso"))
async def choose_course(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –û–±—â–∏–π –∫—É—Ä—Å", callback_data="curso_general")],
        [InlineKeyboardButton(text="‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data="curso_viajes")],
        [InlineKeyboardButton(text="üíº –î–µ–ª–æ–≤–æ–π", callback_data="curso_negocios")]
    ])
    await message.answer("elige un curso:", reply_markup=keyboard)

@dp.message(Command("puntos"))
async def show_points(message: types.Message):
    user_id = message.from_user.id
    points = user_scores.get(user_id, {}).get("puntos", 0)
    await message.answer(f"üèÜ –¢–≤–æ–∏ –æ—á–∫–∏: *{points}*", parse_mode="Markdown")

@dp.message(Command("reset"))
async def reset_points(message: types.Message):
    user_id = message.from_user.id
    user_scores[user_id] = {"puntos": 0, "nivel": "A1", "curso": "general", "palabras_aprendidas": 0, "quiz_resueltos": 0, "errores": 0}
    save_scores()
    await message.answer("üîÑ –û—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

async def send_daily_lesson(bot: Bot):
    for user_id in list(user_scores.keys()):
        try:
            curso = user_scores[user_id].get("curso", "general")
            daily_content = get_daily_content(curso=curso)
            await bot.send_message(user_id, "üåÖ *¬°Buenos d√≠as! Aqu√≠ est√° tu lecci√≥n diaria:*", parse_mode="Markdown")
            # –°–ª–æ–≤–æ
            word = daily_content["palabra"]
            user_scores[user_id]["palabras_aprendidas"] += 1
            await bot.send_message(
                user_id,
                f"üî§ *Palabra del d√≠a ({COURSES[curso]['name']}):*\n*{word['es']}* ‚Äî {word['ru']}\nüí¨ –ü—Ä–∏–º–µ—Ä: _{word['example']}_",
                parse_mode="Markdown"
            )
            audio_file = text_to_speech(word['es'], lang='es')
            if audio_file:
                voice_file = FSInputFile(audio_file)
                await bot.send_voice(user_id, voice_file, caption="üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ")
                os.remove(audio_file)
            # –§—Ä–∞–∑–∞
            phrase = daily_content["frase"]
            await bot.send_message(
                user_id,
                f"üó£ *Frase del d√≠a ({COURSES[curso]['name']}):*\n_{phrase['es']}_\n‚Üí {phrase['ru']}\nüìå –ö–æ–Ω—Ç–µ–∫—Å—Ç: {phrase['context']}",
                parse_mode="Markdown"
            )
            audio_file = text_to_speech(phrase['es'], lang='es')
            if audio_file:
                voice_file = FSInputFile(audio_file)
                await bot.send_voice(user_id, voice_file, caption="üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã")
                os.remove(audio_file)
            # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
            quiz = daily_content["quiz"]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for i, option in enumerate(quiz["options"]):
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=option,
                        callback_data=QuizCallback(answer_index=i).pack()
                    )
                ])
            await bot.send_message(
                user_id,
                f"‚ùì *{quiz['question']}*",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            user_scores.pop(user_id, None)

# scheduler = AsyncIOScheduler()
# scheduler.add_job(
#     send_daily_lesson,
#     "cron",
#     hour=9,
#     minute=0,
#     args=[bot]
# )

async def main():
    global user_scores
    user_scores = load_scores()
   #scheduler.start()
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())